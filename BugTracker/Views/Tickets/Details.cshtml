@model BugTracker.ViewModels.TicketDetailsViewModel

@{
    ViewBag.Title = Model.Subject;
}

<div class="row">
    <div class="col-lg-12">
        <div class="page-header">
            <h1>
                @Html.DisplayFor(m => m.Subject)
            </h1>
            <span class="text-muted">
                @Html.DisplayNameFor(m => m.ProjectName): @Html.DisplayFor(m => m.ProjectName)
            </span>
        </div>
    </div>
    <!-- /.col-lg-12 -->
</div>

<div class="well">
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-condensed no-border">
                <tbody>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.Id)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.Id)
                        </td>
                        <th>
                            @Html.DisplayNameFor(m => m.AuthorName)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.AuthorName)
                        </td>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.Created)
                        </th>
                        <td>
                            @Model.Created.ToString("yy-MM-dd HH:mm")
                        </td>
                        <th>
                            @Html.DisplayNameFor(m => m.Updated)
                        </th>
                        <td>
                            @(Model.Updated?.ToString("yy-MM-dd HH:mm"))
                        </td>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.CategoryName)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.CategoryName)
                        </td>
                        <th>
                            @Html.DisplayNameFor(m => m.PriorityName)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.PriorityName)
                        </td>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.StatusName)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.StatusName)
                        </td>
                        <th>
                            @Html.DisplayNameFor(m => m.AssigneeName)
                        </th>
                        <td>
                            @Html.DisplayFor(m => m.AssigneeName)
                        </td>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.StartDate)
                        </th>
                        <td>
                            @(Model.StartDate?.ToString("yy-MM-dd HH:mm"))
                        </td>
                        <th>
                            @Html.DisplayNameFor(m => m.DueDate)
                        </th>
                        <td>
                            @(Model.DueDate?.ToString("yy-MM-dd HH:mm"))
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-lg-6">
            <table class="table table-condensed no-border">
                <tbody>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.Description)
                        </th>
                    </tr>
                    <tr>
                        <td class="break-word">
                            @Html.Raw(Model.Description)
                        </td>
                    </tr>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(m => m.Attachments)
                        </th>
                    </tr>
                    <tr>
                        <td class="break-word">
                            @{
                                ViewBag.RemoveAttachClassName = "remove-attachment-btn";
                            }
                            @Html.Partial("_AttachmentPartial", Model.Attachments)
                        </td>
                    </tr>
                </tbody>
            </table>
            @if (Model.CanEdit)
            {
                <a class="btn btn-link no-padding" id="enableUpload">
                    <i class="fas fa-paperclip fa-fw"></i> Add
                </a>
            }
            @if (Model.Attachments.Any(a => a.CanDelete))
            {
                @Html.Raw("&emsp;");
                <a class="btn btn-link no-padding" id="enableRemove">
                    <i class="fas fa-times fa-fw"></i> Remove
                </a>
            }
        </div>
    </div>
    <div class="row" id="attachmentForm" style="display: none">
        @using (Html.BeginForm("Create", "Attachments", FormMethod.Post,
                    new { enctype = "Multipart/form-data" }))
        {
            <div class="col-lg-6">
                <br />
                <input name="ticketId" type="hidden" value="@Model.Id" />
                <input name="file" type="file" class="form-control" id="fileUpload" />
            </div>
            <div class="col-lg-6">
                <br />
                <input type="submit" value="Submit" class="btn btn-default" />
                <span class="text-danger">
                    &emsp;Note: File size must not exceed 2 MB
                </span>
            </div>
        }
    </div>
    <hr />
    @if (Model.CanEdit)
    {
        <a href=@Url.Action("Edit", new { id = Model.Id }) title="Edit Project">
            <i class="fas fa-edit fa-fw"></i> Edit
        </a>
    }
    @if (Model.CanDelete)
    {
        @Html.Raw("&emsp;")
        <a href=@Url.Action("Delete", new { id = Model.Id }) title="Delete Project">
            <i class="fas fa-trash-alt fa-fw"></i> Delete
        </a>
    }

    @if (Model.CanAssign)
    {
        @Html.Raw("&emsp;")
        <a class="btn btn-link no-padding" id="enableAssignment">
            <i class="fas fa-user-tag fa-fw"></i> Assign To
        </a>
        using (Html.BeginForm("Assign", "Tickets", FormMethod.Post,
            new { id = "AssignForm", style = "display: none" }))
        {
            <br />
            @Html.AntiForgeryToken()
            <input type="hidden" id="Id" name="Id" value=@Model.Id class="form-control" />
            <div class="row">
                <div class="form-group">
                    <div class="col-lg-6">
                        <select class="form-control" id="AssigneeId" name="AssigneeId"></select>
                    </div>
                    <div class="col-lg-6">
                        <input type="submit" value="Assign" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    }
</div>

<div class="row">
    <div class="col-md-6">
        @Html.Partial("_HistoryListPartial", Model.Revisions)
    </div>
    <div class="col-md-6">
        @Html.Partial("_CommentListPartial", Model.Id)
    </div>
</div>

@section Scripts {
    @if (Model.CanAssign)
    {

        <script type="text/javascript">
            $("#enableAssignment").click(() => {
                if ($('#AssignForm').is(':visible')) {
                    $("#enableAssignment").html(`<i class="fas fa-user-tag fa-fw"></i> Assign To`);
                    $("#AssignForm").hide();
                } else {
                    $("#enableAssignment").html(`<i class="fas fa-ban fa-fw"></i> Cancel`);
                    $("#AssignForm").show();
                    showValue(@Model.ProjectId, "@Model.AssigneeId");
                }
            });

            function showValue(projectId, selectedVal = null)
            {
                $("#AssigneeId").html("<option value>Not Assigned</option>");
                projectId &&
                    $.getJSON('@Url.Action("GetAssigneeList", "Tickets")' + "?projectId=" + projectId, (result) => {
                        const data = result.data;
                        for (const item of data) {
                            $("#AssigneeId").append(`<option value="${item.Id}">${item.DisplayName}&emsp;(${item.Roles.join(", ")})</option>`)
                            item.Id == selectedVal && $("#AssigneeId").val(selectedVal);
                        }
                    });
            }
        </script>
    }
    @if (Model.CanEdit)
    {
        <script type="text/javascript">
            $("#enableUpload").click(() => {
                if ($('#attachmentForm').is(':visible')) {
                    $("#enableUpload").html(`<i class="fas fa-paperclip fa-fw"></i> Add`);
                    $("#attachmentForm").hide();
                } else {
                    $("#enableUpload").html(`<i class="fas fa-ban fa-fw"></i> Cancel`);
                    $("#attachmentForm").show();
                }
            });
        </script>
    }
    @if (Model.Attachments.Any(a => a.CanDelete))
    {
        <script type="text/javascript">
            $("#enableRemove").click(() => {
                if ($('.@ViewBag.RemoveAttachClassName').is(':visible')) {
                    $("#enableRemove").html(`<i class="fas fa-times fa-fw"></i> Remove`);
                    $(".@ViewBag.RemoveAttachClassName").hide();
                } else {
                    $("#enableRemove").html(`<i class="fas fa-ban fa-fw"></i> Cancel`);
                    $(".@ViewBag.RemoveAttachClassName").show();
                }
            });
        </script>
    }
}
